// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: dynamic.proto

package pb_dynamic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DynamicService_CreateLayerUserBinding_FullMethodName       = "/dynamic.DynamicService/CreateLayerUserBinding"
	DynamicService_GetLayerUserBinding_FullMethodName          = "/dynamic.DynamicService/GetLayerUserBinding"
	DynamicService_DeleteLayerUserBinding_FullMethodName       = "/dynamic.DynamicService/DeleteLayerUserBinding"
	DynamicService_CreateExperimentUserBinding_FullMethodName  = "/dynamic.DynamicService/CreateExperimentUserBinding"
	DynamicService_GetExperimentUserBinding_FullMethodName     = "/dynamic.DynamicService/GetExperimentUserBinding"
	DynamicService_DeleteExperimentUserBinding_FullMethodName  = "/dynamic.DynamicService/DeleteExperimentUserBinding"
	DynamicService_CreateExperimentLayerBinding_FullMethodName = "/dynamic.DynamicService/CreateExperimentLayerBinding"
	DynamicService_GetExperimentLayerBinding_FullMethodName    = "/dynamic.DynamicService/GetExperimentLayerBinding"
	DynamicService_GetLayerExperiments_FullMethodName          = "/dynamic.DynamicService/GetLayerExperiments"
	DynamicService_DeleteExperimentLayerBinding_FullMethodName = "/dynamic.DynamicService/DeleteExperimentLayerBinding"
)

// DynamicServiceClient is the client API for DynamicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 动态实验服务
type DynamicServiceClient interface {
	// 层用户绑定
	CreateLayerUserBinding(ctx context.Context, in *CreateLayerUserBindingRequest, opts ...grpc.CallOption) (*CreateLayerUserBindingResponse, error)
	GetLayerUserBinding(ctx context.Context, in *GetLayerUserBindingRequest, opts ...grpc.CallOption) (*GetLayerUserBindingResponse, error)
	DeleteLayerUserBinding(ctx context.Context, in *DeleteLayerUserBindingRequest, opts ...grpc.CallOption) (*DeleteLayerUserBindingResponse, error)
	// 实验用户绑定
	CreateExperimentUserBinding(ctx context.Context, in *CreateExperimentUserBindingRequest, opts ...grpc.CallOption) (*CreateExperimentUserBindingResponse, error)
	GetExperimentUserBinding(ctx context.Context, in *GetExperimentUserBindingRequest, opts ...grpc.CallOption) (*GetExperimentUserBindingResponse, error)
	DeleteExperimentUserBinding(ctx context.Context, in *DeleteExperimentUserBindingRequest, opts ...grpc.CallOption) (*DeleteExperimentUserBindingResponse, error)
	// 实验层绑定
	CreateExperimentLayerBinding(ctx context.Context, in *CreateExperimentLayerBindingRequest, opts ...grpc.CallOption) (*CreateExperimentLayerBindingResponse, error)
	GetExperimentLayerBinding(ctx context.Context, in *GetExperimentLayerBindingRequest, opts ...grpc.CallOption) (*GetExperimentLayerBindingResponse, error)
	GetLayerExperiments(ctx context.Context, in *GetLayerExperimentsRequest, opts ...grpc.CallOption) (*GetLayerExperimentsResponse, error)
	DeleteExperimentLayerBinding(ctx context.Context, in *DeleteExperimentLayerBindingRequest, opts ...grpc.CallOption) (*DeleteExperimentLayerBindingResponse, error)
}

type dynamicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDynamicServiceClient(cc grpc.ClientConnInterface) DynamicServiceClient {
	return &dynamicServiceClient{cc}
}

func (c *dynamicServiceClient) CreateLayerUserBinding(ctx context.Context, in *CreateLayerUserBindingRequest, opts ...grpc.CallOption) (*CreateLayerUserBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLayerUserBindingResponse)
	err := c.cc.Invoke(ctx, DynamicService_CreateLayerUserBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) GetLayerUserBinding(ctx context.Context, in *GetLayerUserBindingRequest, opts ...grpc.CallOption) (*GetLayerUserBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLayerUserBindingResponse)
	err := c.cc.Invoke(ctx, DynamicService_GetLayerUserBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) DeleteLayerUserBinding(ctx context.Context, in *DeleteLayerUserBindingRequest, opts ...grpc.CallOption) (*DeleteLayerUserBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLayerUserBindingResponse)
	err := c.cc.Invoke(ctx, DynamicService_DeleteLayerUserBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) CreateExperimentUserBinding(ctx context.Context, in *CreateExperimentUserBindingRequest, opts ...grpc.CallOption) (*CreateExperimentUserBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExperimentUserBindingResponse)
	err := c.cc.Invoke(ctx, DynamicService_CreateExperimentUserBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) GetExperimentUserBinding(ctx context.Context, in *GetExperimentUserBindingRequest, opts ...grpc.CallOption) (*GetExperimentUserBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExperimentUserBindingResponse)
	err := c.cc.Invoke(ctx, DynamicService_GetExperimentUserBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) DeleteExperimentUserBinding(ctx context.Context, in *DeleteExperimentUserBindingRequest, opts ...grpc.CallOption) (*DeleteExperimentUserBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteExperimentUserBindingResponse)
	err := c.cc.Invoke(ctx, DynamicService_DeleteExperimentUserBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) CreateExperimentLayerBinding(ctx context.Context, in *CreateExperimentLayerBindingRequest, opts ...grpc.CallOption) (*CreateExperimentLayerBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExperimentLayerBindingResponse)
	err := c.cc.Invoke(ctx, DynamicService_CreateExperimentLayerBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) GetExperimentLayerBinding(ctx context.Context, in *GetExperimentLayerBindingRequest, opts ...grpc.CallOption) (*GetExperimentLayerBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExperimentLayerBindingResponse)
	err := c.cc.Invoke(ctx, DynamicService_GetExperimentLayerBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) GetLayerExperiments(ctx context.Context, in *GetLayerExperimentsRequest, opts ...grpc.CallOption) (*GetLayerExperimentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLayerExperimentsResponse)
	err := c.cc.Invoke(ctx, DynamicService_GetLayerExperiments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) DeleteExperimentLayerBinding(ctx context.Context, in *DeleteExperimentLayerBindingRequest, opts ...grpc.CallOption) (*DeleteExperimentLayerBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteExperimentLayerBindingResponse)
	err := c.cc.Invoke(ctx, DynamicService_DeleteExperimentLayerBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicServiceServer is the server API for DynamicService service.
// All implementations must embed UnimplementedDynamicServiceServer
// for forward compatibility.
//
// 动态实验服务
type DynamicServiceServer interface {
	// 层用户绑定
	CreateLayerUserBinding(context.Context, *CreateLayerUserBindingRequest) (*CreateLayerUserBindingResponse, error)
	GetLayerUserBinding(context.Context, *GetLayerUserBindingRequest) (*GetLayerUserBindingResponse, error)
	DeleteLayerUserBinding(context.Context, *DeleteLayerUserBindingRequest) (*DeleteLayerUserBindingResponse, error)
	// 实验用户绑定
	CreateExperimentUserBinding(context.Context, *CreateExperimentUserBindingRequest) (*CreateExperimentUserBindingResponse, error)
	GetExperimentUserBinding(context.Context, *GetExperimentUserBindingRequest) (*GetExperimentUserBindingResponse, error)
	DeleteExperimentUserBinding(context.Context, *DeleteExperimentUserBindingRequest) (*DeleteExperimentUserBindingResponse, error)
	// 实验层绑定
	CreateExperimentLayerBinding(context.Context, *CreateExperimentLayerBindingRequest) (*CreateExperimentLayerBindingResponse, error)
	GetExperimentLayerBinding(context.Context, *GetExperimentLayerBindingRequest) (*GetExperimentLayerBindingResponse, error)
	GetLayerExperiments(context.Context, *GetLayerExperimentsRequest) (*GetLayerExperimentsResponse, error)
	DeleteExperimentLayerBinding(context.Context, *DeleteExperimentLayerBindingRequest) (*DeleteExperimentLayerBindingResponse, error)
	mustEmbedUnimplementedDynamicServiceServer()
}

// UnimplementedDynamicServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDynamicServiceServer struct{}

func (UnimplementedDynamicServiceServer) CreateLayerUserBinding(context.Context, *CreateLayerUserBindingRequest) (*CreateLayerUserBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLayerUserBinding not implemented")
}
func (UnimplementedDynamicServiceServer) GetLayerUserBinding(context.Context, *GetLayerUserBindingRequest) (*GetLayerUserBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLayerUserBinding not implemented")
}
func (UnimplementedDynamicServiceServer) DeleteLayerUserBinding(context.Context, *DeleteLayerUserBindingRequest) (*DeleteLayerUserBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLayerUserBinding not implemented")
}
func (UnimplementedDynamicServiceServer) CreateExperimentUserBinding(context.Context, *CreateExperimentUserBindingRequest) (*CreateExperimentUserBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperimentUserBinding not implemented")
}
func (UnimplementedDynamicServiceServer) GetExperimentUserBinding(context.Context, *GetExperimentUserBindingRequest) (*GetExperimentUserBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentUserBinding not implemented")
}
func (UnimplementedDynamicServiceServer) DeleteExperimentUserBinding(context.Context, *DeleteExperimentUserBindingRequest) (*DeleteExperimentUserBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperimentUserBinding not implemented")
}
func (UnimplementedDynamicServiceServer) CreateExperimentLayerBinding(context.Context, *CreateExperimentLayerBindingRequest) (*CreateExperimentLayerBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperimentLayerBinding not implemented")
}
func (UnimplementedDynamicServiceServer) GetExperimentLayerBinding(context.Context, *GetExperimentLayerBindingRequest) (*GetExperimentLayerBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentLayerBinding not implemented")
}
func (UnimplementedDynamicServiceServer) GetLayerExperiments(context.Context, *GetLayerExperimentsRequest) (*GetLayerExperimentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLayerExperiments not implemented")
}
func (UnimplementedDynamicServiceServer) DeleteExperimentLayerBinding(context.Context, *DeleteExperimentLayerBindingRequest) (*DeleteExperimentLayerBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperimentLayerBinding not implemented")
}
func (UnimplementedDynamicServiceServer) mustEmbedUnimplementedDynamicServiceServer() {}
func (UnimplementedDynamicServiceServer) testEmbeddedByValue()                        {}

// UnsafeDynamicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynamicServiceServer will
// result in compilation errors.
type UnsafeDynamicServiceServer interface {
	mustEmbedUnimplementedDynamicServiceServer()
}

func RegisterDynamicServiceServer(s grpc.ServiceRegistrar, srv DynamicServiceServer) {
	// If the following call pancis, it indicates UnimplementedDynamicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DynamicService_ServiceDesc, srv)
}

func _DynamicService_CreateLayerUserBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLayerUserBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).CreateLayerUserBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_CreateLayerUserBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).CreateLayerUserBinding(ctx, req.(*CreateLayerUserBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_GetLayerUserBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLayerUserBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).GetLayerUserBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_GetLayerUserBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).GetLayerUserBinding(ctx, req.(*GetLayerUserBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_DeleteLayerUserBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLayerUserBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).DeleteLayerUserBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_DeleteLayerUserBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).DeleteLayerUserBinding(ctx, req.(*DeleteLayerUserBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_CreateExperimentUserBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExperimentUserBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).CreateExperimentUserBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_CreateExperimentUserBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).CreateExperimentUserBinding(ctx, req.(*CreateExperimentUserBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_GetExperimentUserBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentUserBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).GetExperimentUserBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_GetExperimentUserBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).GetExperimentUserBinding(ctx, req.(*GetExperimentUserBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_DeleteExperimentUserBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentUserBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).DeleteExperimentUserBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_DeleteExperimentUserBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).DeleteExperimentUserBinding(ctx, req.(*DeleteExperimentUserBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_CreateExperimentLayerBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExperimentLayerBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).CreateExperimentLayerBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_CreateExperimentLayerBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).CreateExperimentLayerBinding(ctx, req.(*CreateExperimentLayerBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_GetExperimentLayerBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentLayerBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).GetExperimentLayerBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_GetExperimentLayerBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).GetExperimentLayerBinding(ctx, req.(*GetExperimentLayerBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_GetLayerExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLayerExperimentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).GetLayerExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_GetLayerExperiments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).GetLayerExperiments(ctx, req.(*GetLayerExperimentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_DeleteExperimentLayerBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentLayerBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).DeleteExperimentLayerBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_DeleteExperimentLayerBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).DeleteExperimentLayerBinding(ctx, req.(*DeleteExperimentLayerBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DynamicService_ServiceDesc is the grpc.ServiceDesc for DynamicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DynamicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dynamic.DynamicService",
	HandlerType: (*DynamicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLayerUserBinding",
			Handler:    _DynamicService_CreateLayerUserBinding_Handler,
		},
		{
			MethodName: "GetLayerUserBinding",
			Handler:    _DynamicService_GetLayerUserBinding_Handler,
		},
		{
			MethodName: "DeleteLayerUserBinding",
			Handler:    _DynamicService_DeleteLayerUserBinding_Handler,
		},
		{
			MethodName: "CreateExperimentUserBinding",
			Handler:    _DynamicService_CreateExperimentUserBinding_Handler,
		},
		{
			MethodName: "GetExperimentUserBinding",
			Handler:    _DynamicService_GetExperimentUserBinding_Handler,
		},
		{
			MethodName: "DeleteExperimentUserBinding",
			Handler:    _DynamicService_DeleteExperimentUserBinding_Handler,
		},
		{
			MethodName: "CreateExperimentLayerBinding",
			Handler:    _DynamicService_CreateExperimentLayerBinding_Handler,
		},
		{
			MethodName: "GetExperimentLayerBinding",
			Handler:    _DynamicService_GetExperimentLayerBinding_Handler,
		},
		{
			MethodName: "GetLayerExperiments",
			Handler:    _DynamicService_GetLayerExperiments_Handler,
		},
		{
			MethodName: "DeleteExperimentLayerBinding",
			Handler:    _DynamicService_DeleteExperimentLayerBinding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dynamic.proto",
}
