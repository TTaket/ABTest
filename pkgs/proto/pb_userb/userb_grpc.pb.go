// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: userb.proto

package pb_userb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserbService_AddUser_FullMethodName          = "/userb.UserbService/AddUser"
	UserbService_BatchAddUser_FullMethodName     = "/userb.UserbService/BatchAddUser"
	UserbService_DeleteUser_FullMethodName       = "/userb.UserbService/DeleteUser"
	UserbService_BatchDeleteUser_FullMethodName  = "/userb.UserbService/BatchDeleteUser"
	UserbService_UpdateUser_FullMethodName       = "/userb.UserbService/UpdateUser"
	UserbService_BatchUpdateUser_FullMethodName  = "/userb.UserbService/BatchUpdateUser"
	UserbService_GetUserInfo_FullMethodName      = "/userb.UserbService/GetUserInfo"
	UserbService_BatchGetUserInfo_FullMethodName = "/userb.UserbService/BatchGetUserInfo"
)

// UserbServiceClient is the client API for UserbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserbServiceClient interface {
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	BatchAddUser(ctx context.Context, in *BatchAddUserRequest, opts ...grpc.CallOption) (*BatchAddUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	BatchDeleteUser(ctx context.Context, in *BatchDeleteUserRequest, opts ...grpc.CallOption) (*BatchDeleteUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	BatchUpdateUser(ctx context.Context, in *BatchUpdateUserRequest, opts ...grpc.CallOption) (*BatchUpdateUserResponse, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	BatchGetUserInfo(ctx context.Context, in *BatchGetUserInfoRequest, opts ...grpc.CallOption) (*BatchGetUserInfoResponse, error)
}

type userbServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserbServiceClient(cc grpc.ClientConnInterface) UserbServiceClient {
	return &userbServiceClient{cc}
}

func (c *userbServiceClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, UserbService_AddUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userbServiceClient) BatchAddUser(ctx context.Context, in *BatchAddUserRequest, opts ...grpc.CallOption) (*BatchAddUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchAddUserResponse)
	err := c.cc.Invoke(ctx, UserbService_BatchAddUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userbServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, UserbService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userbServiceClient) BatchDeleteUser(ctx context.Context, in *BatchDeleteUserRequest, opts ...grpc.CallOption) (*BatchDeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchDeleteUserResponse)
	err := c.cc.Invoke(ctx, UserbService_BatchDeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userbServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, UserbService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userbServiceClient) BatchUpdateUser(ctx context.Context, in *BatchUpdateUserRequest, opts ...grpc.CallOption) (*BatchUpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchUpdateUserResponse)
	err := c.cc.Invoke(ctx, UserbService_BatchUpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userbServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, UserbService_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userbServiceClient) BatchGetUserInfo(ctx context.Context, in *BatchGetUserInfoRequest, opts ...grpc.CallOption) (*BatchGetUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetUserInfoResponse)
	err := c.cc.Invoke(ctx, UserbService_BatchGetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserbServiceServer is the server API for UserbService service.
// All implementations must embed UnimplementedUserbServiceServer
// for forward compatibility.
type UserbServiceServer interface {
	AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	BatchAddUser(context.Context, *BatchAddUserRequest) (*BatchAddUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	BatchDeleteUser(context.Context, *BatchDeleteUserRequest) (*BatchDeleteUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	BatchUpdateUser(context.Context, *BatchUpdateUserRequest) (*BatchUpdateUserResponse, error)
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	BatchGetUserInfo(context.Context, *BatchGetUserInfoRequest) (*BatchGetUserInfoResponse, error)
	mustEmbedUnimplementedUserbServiceServer()
}

// UnimplementedUserbServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserbServiceServer struct{}

func (UnimplementedUserbServiceServer) AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserbServiceServer) BatchAddUser(context.Context, *BatchAddUserRequest) (*BatchAddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddUser not implemented")
}
func (UnimplementedUserbServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserbServiceServer) BatchDeleteUser(context.Context, *BatchDeleteUserRequest) (*BatchDeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteUser not implemented")
}
func (UnimplementedUserbServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserbServiceServer) BatchUpdateUser(context.Context, *BatchUpdateUserRequest) (*BatchUpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateUser not implemented")
}
func (UnimplementedUserbServiceServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserbServiceServer) BatchGetUserInfo(context.Context, *BatchGetUserInfoRequest) (*BatchGetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUserInfo not implemented")
}
func (UnimplementedUserbServiceServer) mustEmbedUnimplementedUserbServiceServer() {}
func (UnimplementedUserbServiceServer) testEmbeddedByValue()                      {}

// UnsafeUserbServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserbServiceServer will
// result in compilation errors.
type UnsafeUserbServiceServer interface {
	mustEmbedUnimplementedUserbServiceServer()
}

func RegisterUserbServiceServer(s grpc.ServiceRegistrar, srv UserbServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserbServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserbService_ServiceDesc, srv)
}

func _UserbService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserbServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserbService_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserbServiceServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserbService_BatchAddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserbServiceServer).BatchAddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserbService_BatchAddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserbServiceServer).BatchAddUser(ctx, req.(*BatchAddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserbService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserbServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserbService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserbServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserbService_BatchDeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserbServiceServer).BatchDeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserbService_BatchDeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserbServiceServer).BatchDeleteUser(ctx, req.(*BatchDeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserbService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserbServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserbService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserbServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserbService_BatchUpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserbServiceServer).BatchUpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserbService_BatchUpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserbServiceServer).BatchUpdateUser(ctx, req.(*BatchUpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserbService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserbServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserbService_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserbServiceServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserbService_BatchGetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserbServiceServer).BatchGetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserbService_BatchGetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserbServiceServer).BatchGetUserInfo(ctx, req.(*BatchGetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserbService_ServiceDesc is the grpc.ServiceDesc for UserbService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserbService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userb.UserbService",
	HandlerType: (*UserbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserbService_AddUser_Handler,
		},
		{
			MethodName: "BatchAddUser",
			Handler:    _UserbService_BatchAddUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserbService_DeleteUser_Handler,
		},
		{
			MethodName: "BatchDeleteUser",
			Handler:    _UserbService_BatchDeleteUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserbService_UpdateUser_Handler,
		},
		{
			MethodName: "BatchUpdateUser",
			Handler:    _UserbService_BatchUpdateUser_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserbService_GetUserInfo_Handler,
		},
		{
			MethodName: "BatchGetUserInfo",
			Handler:    _UserbService_BatchGetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userb.proto",
}
